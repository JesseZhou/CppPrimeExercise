	滑稽,流氓,懈怠,玩世不恭，倦怠之情此起彼伏.倘若世间有人以温柔慰我,何至于如此堕入魔道，万劫不复?
	
		
	
	const
	
	volatile: 可能有程序本身之外的力量修改内存单元的值.所以不能在优化时,因为访问频繁而做优化,而将数据放到寄存器.
	必须每次都去读.
	
	extern 表示引用声明
	
	.h
	声明extern const
	
	.m
	定义const
	
	c++找函数
	看声明
	如果是内联
		在当前文件里找
		
	是外联,在所有文件里找
	
	如果没找到,在库里找
	
	当c和c++混用时,找函数变得有点困难
	对c而言,链接时,函数_spiff(int)标识为 _spiff
	而对c++而言,链接时,函数_spiff(int)标识为 _spiff_i
	
	解决方法是:在文件里告诉链接器,要找的符号名被解析为C还是C++方式
	
	extern 声明是为了告诉链接器,以此为标识去寻找对应的方法
	
	生活的感慨:下午时用android调试界面也行呵
	
	动态分配时  new (static变量的地址) someType  分配空间时会分配此静态变量对应的内存空间
	这是一种非常规的动态分配方式
	
	namespace VS 全局
		namespace是全局变量的一种特殊表示形式
		
	倘若在代码块里using namespace::variable;
	则此variable会成为局部变量.
	但如果在调用时才引用,不会成为局部变量
	
	如
	// 命名空间
	namespace Jill {
    double bucket( double n ){return 0.0f;}
    double fetch;
    struct chaff{
        char dross[20];
        int slag;
    };
    }
	
    // 全局
	char fetch;
	
	int main(){
		// 局部
		char fetch;
		
		cin >> Jill::fetch;
		cin >> ::fetch;
		cin >> fetch;		
		
		return 0;
	}
	
	using是一种声明名称或名称空间的方式,放在代码块外整个编译单元可用
	放在代码块里整个代码块可用,且当成自动变量
	
	using namespace std;
	
	
	#include <iostream>和#include <iostream.h> 的差别
	前者是调用某命名空间里的标识，需要额外加using namespace才好用
	后者是调用某文件，不用加命名空间编译
	
	当然，如果库工具里没有iostream，那就只能用#include <iostream.h>
	
	
	c++体现了OOP的多种特性
	包括
		抽象
		封装
		多态
		继承
		重用代码
		
	实现的媒介是类

	类的初始化和赋值操作
	初始化：
		Stock stock1 = Stock(params);
		只会创建一个对象，就是stock1
	
	赋值：
		stock1 = Stock(params);
		会创建一个临时对象，赋值效率低于初始化方法
	

	const修饰的类，倘若要调用方法，需要在方法的定义和声明后都加上const做修饰
	
	循环是输入处理里最常用的手段
	while( '\n' != cin.get() ) continue;
	
	凡是要循环读入一段输入，并因某个条件而终止时，都可用 while( cin )
	唉 我好讨厌复述输入处理的流程啊，因为很多都不理解呢
	
	step1
		打印输入提示并cin>> ch

	step2
		一个控制流程，过滤非法字符
		
	step3
		开始处理文本
			如果需要嵌套的输入，添加循环套路即可
			
	类是用户定义的类型/对象是类的实例（就是内置类型的定义
	）
	

	引用c++类库时，include类名，而后在代码块之外using namespace
	例如要调用string类里的方法
	
	#include<string>
	
	然后在代码块外调用using namespace std;即可

	#命令行编译#	
		首先要将g++.exe的路径添加到system 的path变量里
		然后到源文件所在的路径，打开命令行
		
		g++ 源文件1 源文件2 -o 目标文件名
		例如
		g++ file1 file2 -o a
		则输出 a.exe
	

	自定义防止重复的宏时，一定要前置两个下横线！！否则可能和库定义重复	
	
	
	一个类，包含了数据和访问
	
	嗯，感觉编程是个很复杂的东西
	
	面向对象是从宏观的角度去对待系统
	
	1、了解系统的接口，就是系统有哪些功能
	2、系统的外部环境是什么
	3、剖析系统的内部，规定一个粒度，列举出在该粒度上的物体
	4、还有一些抽象的对象，比如消息
	
	有一个痛的领悟：自定义宏时，要用双下划线做前缀，防止与系统定义的宏冲突
	曾用一个下划线做前缀，与系统宏重复，导致编译失败
	
	1  plorg 有 名称和CI，默认值分别为 'Plorga' 和 50
	2  可展示自己的名称和CI
	3  可修改自己的CI
	
	列表
	可以存储0~N个指定类型的数据
	默认状态为空
	可将数据项加入其中
	可判断列表是否空
	可判断列表是否满
	可访问列表中的数据，并执行操作
	
	